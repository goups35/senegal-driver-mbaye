/**\n * Enhanced error reporting and monitoring utilities\n */\n\nexport interface ErrorReport {\n  message: string\n  stack?: string\n  url: string\n  timestamp: number\n  userAgent: string\n  userId?: string\n  sessionId?: string\n  context?: Record<string, any>\n  severity: 'low' | 'medium' | 'high' | 'critical'\n}\n\nexport interface ErrorReportingConfig {\n  endpoint?: string\n  apiKey?: string\n  enableConsoleLog?: boolean\n  enableLocalStorage?: boolean\n  maxReports?: number\n  userId?: string\n}\n\nclass ErrorReporter {\n  private static instance: ErrorReporter\n  private config: ErrorReportingConfig\n  private sessionId: string\n  private reports: ErrorReport[] = []\n\n  private constructor(config: ErrorReportingConfig = {}) {\n    this.config = {\n      enableConsoleLog: true,\n      enableLocalStorage: true,\n      maxReports: 50,\n      ...config\n    }\n    this.sessionId = this.generateSessionId()\n    this.initializeErrorHandlers()\n  }\n\n  static getInstance(config?: ErrorReportingConfig): ErrorReporter {\n    if (!ErrorReporter.instance) {\n      ErrorReporter.instance = new ErrorReporter(config)\n    }\n    return ErrorReporter.instance\n  }\n\n  private generateSessionId(): string {\n    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private initializeErrorHandlers() {\n    if (typeof window === 'undefined') return\n\n    // Global error handler\n    window.addEventListener('error', (event) => {\n      this.reportError(\n        new Error(event.message),\n        'high',\n        {\n          filename: event.filename,\n          lineno: event.lineno,\n          colno: event.colno,\n          type: 'javascript-error'\n        }\n      )\n    })\n\n    // Unhandled promise rejection handler\n    window.addEventListener('unhandledrejection', (event) => {\n      this.reportError(\n        new Error(`Unhandled promise rejection: ${event.reason}`),\n        'high',\n        {\n          type: 'unhandled-promise-rejection',\n          reason: event.reason\n        }\n      )\n    })\n\n    // Network error handler\n    const originalFetch = window.fetch\n    window.fetch = async (...args) => {\n      try {\n        const response = await originalFetch(...args)\n        if (!response.ok) {\n          this.reportError(\n            new Error(`Network error: ${response.status} ${response.statusText}`),\n            'medium',\n            {\n              type: 'network-error',\n              url: args[0],\n              status: response.status,\n              statusText: response.statusText\n            }\n          )\n        }\n        return response\n      } catch (error) {\n        this.reportError(\n          error instanceof Error ? error : new Error(String(error)),\n          'high',\n          {\n            type: 'network-error',\n            url: args[0]\n          }\n        )\n        throw error\n      }\n    }\n  }\n\n  reportError(\n    error: Error,\n    severity: ErrorReport['severity'] = 'medium',\n    context?: Record<string, any>\n  ) {\n    const report: ErrorReport = {\n      message: error.message,\n      stack: error.stack,\n      url: typeof window !== 'undefined' ? window.location.href : '',\n      timestamp: Date.now(),\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n      userId: this.config.userId,\n      sessionId: this.sessionId,\n      context,\n      severity\n    }\n\n    this.addReport(report)\n\n    if (this.config.enableConsoleLog) {\n      const consoleMethod = severity === 'critical' || severity === 'high' ? 'error' : 'warn'\n      console[consoleMethod]('Error reported:', report)\n    }\n\n    if (this.config.endpoint) {\n      this.sendToEndpoint(report)\n    }\n\n    if (this.config.enableLocalStorage) {\n      this.saveToLocalStorage()\n    }\n  }\n\n  private addReport(report: ErrorReport) {\n    this.reports.push(report)\n    if (this.reports.length > (this.config.maxReports || 50)) {\n      this.reports = this.reports.slice(-this.config.maxReports!)\n    }\n  }\n\n  private async sendToEndpoint(report: ErrorReport) {\n    try {\n      if (!this.config.endpoint) return\n\n      await fetch(this.config.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(this.config.apiKey && { 'Authorization': `Bearer ${this.config.apiKey}` })\n        },\n        body: JSON.stringify(report)\n      })\n    } catch (error) {\n      console.error('Failed to send error report:', error)\n    }\n  }\n\n  private saveToLocalStorage() {\n    if (typeof localStorage === 'undefined') return\n    try {\n      localStorage.setItem('error-reports', JSON.stringify({\n        sessionId: this.sessionId,\n        reports: this.reports.slice(-10) // Keep only last 10 reports\n      }))\n    } catch (error) {\n      console.warn('Failed to save error reports to localStorage:', error)\n    }\n  }\n\n  getReports(): ErrorReport[] {\n    return [...this.reports]\n  }\n\n  getReportsByTimeRange(startTime: number, endTime: number): ErrorReport[] {\n    return this.reports.filter(\n      report => report.timestamp >= startTime && report.timestamp <= endTime\n    )\n  }\n\n  getReportsBySeverity(severity: ErrorReport['severity']): ErrorReport[] {\n    return this.reports.filter(report => report.severity === severity)\n  }\n\n  clearReports() {\n    this.reports = []\n    if (typeof localStorage !== 'undefined') {\n      localStorage.removeItem('error-reports')\n    }\n  }\n\n  // Manual error reporting for business logic errors\n  logError(message: string, context?: Record<string, any>, severity: ErrorReport['severity'] = 'medium') {\n    this.reportError(new Error(message), severity, context)\n  }\n\n  // User action tracking for error context\n  trackUserAction(action: string, data?: Record<string, any>) {\n    if (typeof window === 'undefined') return\n    \n    const actionData = {\n      action,\n      timestamp: Date.now(),\n      url: window.location.href,\n      ...data\n    }\n\n    // Store recent actions for error context\n    const recentActions = JSON.parse(localStorage.getItem('recent-actions') || '[]')\n    recentActions.push(actionData)\n    \n    // Keep only last 20 actions\n    if (recentActions.length > 20) {\n      recentActions.splice(0, recentActions.length - 20)\n    }\n    \n    localStorage.setItem('recent-actions', JSON.stringify(recentActions))\n  }\n}\n\n// Export singleton instance creator\nexport function createErrorReporter(config?: ErrorReportingConfig): ErrorReporter {\n  return ErrorReporter.getInstance(config)\n}\n\n// Export default instance\nexport const errorReporter = ErrorReporter.getInstance()\n\n// React error boundary helper\nexport function reportReactError(error: Error, errorInfo: any) {\n  errorReporter.reportError(error, 'high', {\n    type: 'react-error',\n    componentStack: errorInfo.componentStack,\n    errorBoundary: true\n  })\n}