/**\n * Accessibility utilities for enhanced user experience\n */\n\n// ARIA live region announcer\nexport class ScreenReaderAnnouncer {\n  private static instance: ScreenReaderAnnouncer\n  private liveRegion: HTMLElement | null = null\n\n  private constructor() {\n    if (typeof window !== 'undefined') {\n      this.createLiveRegion()\n    }\n  }\n\n  static getInstance(): ScreenReaderAnnouncer {\n    if (!ScreenReaderAnnouncer.instance) {\n      ScreenReaderAnnouncer.instance = new ScreenReaderAnnouncer()\n    }\n    return ScreenReaderAnnouncer.instance\n  }\n\n  private createLiveRegion() {\n    if (this.liveRegion || typeof document === 'undefined') return\n\n    this.liveRegion = document.createElement('div')\n    this.liveRegion.setAttribute('aria-live', 'polite')\n    this.liveRegion.setAttribute('aria-atomic', 'true')\n    this.liveRegion.className = 'sr-only'\n    this.liveRegion.style.cssText = `\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      padding: 0;\n      margin: -1px;\n      overflow: hidden;\n      clip: rect(0, 0, 0, 0);\n      border: 0;\n    `\n    document.body.appendChild(this.liveRegion)\n  }\n\n  announce(message: string, priority: 'polite' | 'assertive' = 'polite') {\n    if (!this.liveRegion) return\n\n    this.liveRegion.setAttribute('aria-live', priority)\n    this.liveRegion.textContent = message\n\n    // Clear after announcement\n    setTimeout(() => {\n      if (this.liveRegion) {\n        this.liveRegion.textContent = ''\n      }\n    }, 1000)\n  }\n}\n\n// Check if user prefers reduced motion\nexport function prefersReducedMotion(): boolean {\n  if (typeof window === 'undefined') return false\n  return window.matchMedia('(prefers-reduced-motion: reduce)').matches\n}\n\n// Check if user is using high contrast mode\nexport function prefersHighContrast(): boolean {\n  if (typeof window === 'undefined') return false\n  return window.matchMedia('(prefers-contrast: high)').matches\n}\n\n// Generate unique IDs for accessibility\nlet idCounter = 0\nexport function generateId(prefix: string = 'id'): string {\n  return `${prefix}-${++idCounter}-${Date.now()}`\n}\n\n// Focus trap utility\nexport function createFocusTrap(container: HTMLElement) {\n  const focusableElements = container.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n  )\n  const firstElement = focusableElements[0] as HTMLElement\n  const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement\n\n  const handleTabKey = (e: KeyboardEvent) => {\n    if (e.key !== 'Tab') return\n\n    if (e.shiftKey) {\n      if (document.activeElement === firstElement) {\n        lastElement.focus()\n        e.preventDefault()\n      }\n    } else {\n      if (document.activeElement === lastElement) {\n        firstElement.focus()\n        e.preventDefault()\n      }\n    }\n  }\n\n  container.addEventListener('keydown', handleTabKey)\n\n  // Return cleanup function\n  return () => {\n    container.removeEventListener('keydown', handleTabKey)\n  }\n}\n\n// Skip link helper\nexport function createSkipLink(targetId: string, text: string = 'Aller au contenu principal') {\n  if (typeof document === 'undefined') return\n\n  const skipLink = document.createElement('a')\n  skipLink.href = `#${targetId}`\n  skipLink.textContent = text\n  skipLink.className = 'sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 bg-primary text-primary-foreground px-4 py-2 rounded z-50'\n  \n  skipLink.addEventListener('click', (e) => {\n    e.preventDefault()\n    const target = document.getElementById(targetId)\n    if (target) {\n      target.focus()\n      target.scrollIntoView({ behavior: 'smooth' })\n    }\n  })\n\n  document.body.insertBefore(skipLink, document.body.firstChild)\n}\n\n// Color contrast checker\nexport function getContrastRatio(color1: string, color2: string): number {\n  const getLuminance = (color: string): number => {\n    const rgb = color.match(/\\d+/g)?.map(Number) || [0, 0, 0]\n    const [r, g, b] = rgb.map(c => {\n      c /= 255\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4)\n    })\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b\n  }\n\n  const lum1 = getLuminance(color1)\n  const lum2 = getLuminance(color2)\n  const brightest = Math.max(lum1, lum2)\n  const darkest = Math.min(lum1, lum2)\n  \n  return (brightest + 0.05) / (darkest + 0.05)\n}\n\n// Check if contrast meets WCAG AA standards\nexport function meetsContrastStandard(color1: string, color2: string, level: 'AA' | 'AAA' = 'AA'): boolean {\n  const ratio = getContrastRatio(color1, color2)\n  return level === 'AA' ? ratio >= 4.5 : ratio >= 7\n}\n\n// Manage focus indicators\nexport function manageFocusIndicators() {\n  let isKeyboard = false\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'Tab') {\n      isKeyboard = true\n    }\n  }\n\n  const handleMouseDown = () => {\n    isKeyboard = false\n  }\n\n  const handleFocus = (e: FocusEvent) => {\n    const target = e.target as HTMLElement\n    if (isKeyboard) {\n      target.classList.add('keyboard-focus')\n    } else {\n      target.classList.remove('keyboard-focus')\n    }\n  }\n\n  document.addEventListener('keydown', handleKeyDown)\n  document.addEventListener('mousedown', handleMouseDown)\n  document.addEventListener('focusin', handleFocus)\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown)\n    document.removeEventListener('mousedown', handleMouseDown)\n    document.removeEventListener('focusin', handleFocus)\n  }\n}